package  ${virginPackage}.server.dataaccess.dao;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import $package.${metaData.getRealClassName()};
#if($composedKey == true)
    import $package.${metaData.primaryKey.getRealClassName()};
#end
/**
* Interface for ${metaData.getRealClassName()}DAO.
* 
*/
public interface I${metaData.getRealClassName()}DAO {
/**
* Perform an initial save of a previously unsaved ${metaData.getRealClassName()} entity. All
* subsequent persist actions of this entity should use the #update()
* method. This operation must be performed within the a database
* transaction context for the entity's data to be permanently saved to the
* persistence store, i.e., database. This method uses the
* {@link javax.persistence.EntityManager#persist(Object) EntityManager#persist}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* I${metaData.getRealClassName()}DAO.save(entity);
* EntityManagerHelper.commit();
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to persist
* @throws RuntimeException
*             when the operation fails
*/
public void save(${metaData.getRealClassName()} entity);
/**
* Delete a persistent ${metaData.getRealClassName()} entity. This operation must be performed
* within the a database transaction context for the entity's data to be
* permanently deleted from the persistence store, i.e., database. This
* method uses the
* {@link javax.persistence.EntityManager#remove(Object) EntityManager#delete}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* I${metaData.getRealClassName()}DAO.delete(entity);
* EntityManagerHelper.commit();
* entity = null;
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to delete
* @throws RuntimeException
*             when the operation fails
*/
public void delete(${metaData.getRealClassName()} entity);
/**
* Persist a previously saved ${metaData.getRealClassName()} entity and return it or a copy of it
* to the sender. A copy of the ${metaData.getRealClassName()} entity parameter is returned when
* the JPA persistence mechanism has not previously been tracking the
* updated entity. This operation must be performed within the a database
* transaction context for the entity's data to be permanently saved to the
* persistence store, i.e., database. This method uses the
* {@link javax.persistence.EntityManager#merge(Object) EntityManager#merge}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* entity = I${metaData.getRealClassName()}DAO.update(entity);
* EntityManagerHelper.commit();
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to update
* @return ${metaData.getRealClassName()} the persisted ${metaData.getRealClassName()} entity instance, may not be the
*         same
* @throws RuntimeException
*             if the operation fails
*/
public ${metaData.getRealClassName()} update(${metaData.getRealClassName()} entity);
public  ${metaData.getRealClassName()} findById(${metaData.primaryKey.getRealClassName()} id) ;
/**
* Find all ${metaData.getRealClassName()} entities with a specific property value.
* 
* @param propertyName
*            the name of the ${metaData.getRealClassName()} property to query
* @param value
*            the property value to match
* @param rowStartIdxAndCount
*            Optional int varargs. rowStartIdxAndCount[0] specifies the the
*            row index in the query result-set to begin collecting the
*            results. rowStartIdxAndCount[1] specifies the the maximum
*            count of results to return.
* @return List<${metaData.getRealClassName()}> found by query
    */
    public List<${metaData.getRealClassName()}> findByProperty(String propertyName, Object value,
        int... rowStartIdxAndCount);
        public List<${metaData.getRealClassName()}> findByCriteria(String whereCondition);
            #foreach($member  in $metaData.properties)
                #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
                #if(${member.isSimpleMember()})
                    public List<${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object ${member.name}) ;
                        public List<${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object  ${member.name},				int... rowStartIdxAndCount);
                #end
            #end
            /**
            * Find all ${metaData.getRealClassName()} entities.
            * 
            * @param rowStartIdxAndCount
            *            Optional int varargs. rowStartIdxAndCount[0] specifies the the
            *            row index in the query result-set to begin collecting the
            *            results. rowStartIdxAndCount[1] specifies the the maximum
            *            count of results to return.
            * @return List<${metaData.getRealClassName()}> all ${metaData.getRealClassName()} entities
                */
                public List<${metaData.getRealClassName()}> findAll(int... rowStartIdxAndCount);
                    public List<${metaData.getRealClassName()}> findPage${metaData.getRealClassName()}(String sortColumnName, boolean sortAscending,
                        int startRow, int maxResults) ;
                        public Long findTotalNumber${metaData.getRealClassName()}() ;
                        }
