package  ${virginPackage}.server.dataaccess.dao;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import java.util.logging.Level;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import ${virginPackage}.server.dataaccess.entitymanager.EntityManagerHelper;
import $package.${metaData.getRealClassName()};
#if($composedKey)
    import $package.${metaData.primaryKey.getRealClassName()};
#end
/**
* A data access object (DAO) providing persistence and search support for
* ${metaData.getRealClassName()} entities. Transaction control of the save(), update() and delete()
* operations must be handled externally by senders of these methods or must be
* manually added to each of these methods for data to be persisted to the JPA
* datastore.
* 
* @see lidis.${metaData.getRealClassName()}
*/
public class ${metaData.getRealClassName()}DAO implements I${metaData.getRealClassName()}DAO {
// property constants
#foreach($member  in $metaData.properties)
    #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
    #if(${member.isSimpleMember()})
        //public static final $member.getRealClassName()  $propUpper = "${member.name}";
        public static final String  $propUpper = "${member.name}";
    #end
#end
private EntityManager getEntityManager() {
return EntityManagerHelper.getEntityManager();
}
/**
* Perform an initial save of a previously unsaved ${metaData.getRealClassName()} entity. All
* subsequent persist actions of this entity should use the #update()
* method. This operation must be performed within the a database
* transaction context for the entity's data to be permanently saved to the
* persistence store, i.e., database. This method uses the
* {@link javax.persistence.EntityManager#persist(Object) EntityManager#persist}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* ${metaData.getRealClassName()}DAO.save(entity);
* EntityManagerHelper.commit();
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to persist
* @throws RuntimeException
*             when the operation fails
*/
public void save(${metaData.getRealClassName()} entity) {
EntityManagerHelper.log("saving ${metaData.getRealClassName()} instance", Level.INFO, null);
try {
getEntityManager().persist(entity);
EntityManagerHelper.log("save successful", Level.INFO, null);
} catch (RuntimeException re) {
EntityManagerHelper.log("save failed", Level.SEVERE, re);
throw re;
}
}
/**
* Delete a persistent ${metaData.getRealClassName()} entity. This operation must be performed
* within the a database transaction context for the entity's data to be
* permanently deleted from the persistence store, i.e., database. This
* method uses the
* {@link javax.persistence.EntityManager#remove(Object) EntityManager#delete}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* ${metaData.getRealClassName()}DAO.delete(entity);
* EntityManagerHelper.commit();
* entity = null;
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to delete
* @throws RuntimeException
*             when the operation fails
*/
public void delete(${metaData.getRealClassName()} entity) {
EntityManagerHelper.log("deleting ${metaData.getRealClassName()} instance", Level.INFO, null);
try {
entity = getEntityManager().getReference(${metaData.getRealClassName()}.class,
entity.get${metaData.primaryKey.getGetNameOfPrimaryName()}());
getEntityManager().remove(entity);
EntityManagerHelper.log("delete successful", Level.INFO, null);
} catch (RuntimeException re) {
EntityManagerHelper.log("delete failed", Level.SEVERE, re);
throw re;
}
}
/**
* Persist a previously saved ${metaData.getRealClassName()} entity and return it or a copy of it
* to the sender. A copy of the ${metaData.getRealClassName()} entity parameter is returned when
* the JPA persistence mechanism has not previously been tracking the
* updated entity. This operation must be performed within the a database
* transaction context for the entity's data to be permanently saved to the
* persistence store, i.e., database. This method uses the
* {@link javax.persistence.EntityManager#merge(Object) EntityManager#merge}
* operation.
* 
* <pre>
* EntityManagerHelper.beginTransaction();
* entity = ${metaData.getRealClassName()}DAO.update(entity);
* EntityManagerHelper.commit();
* </pre>
* 
* @param entity
*            ${metaData.getRealClassName()} entity to update
* @return ${metaData.getRealClassName()} the persisted ${metaData.getRealClassName()} entity instance, may not be the
*         same
* @throws RuntimeException
*             if the operation fails
*/
public ${metaData.getRealClassName()} update(${metaData.getRealClassName()} entity) {
EntityManagerHelper.log("updating ${metaData.getRealClassName()} instance", Level.INFO, null);
try {
${metaData.getRealClassName()} result = getEntityManager().merge(entity);
EntityManagerHelper.log("update successful", Level.INFO, null);
return result;
} catch (RuntimeException re) {
EntityManagerHelper.log("update failed", Level.SEVERE, re);
throw re;
}
}
public  ${metaData.getRealClassName()} findById(${metaData.primaryKey.getRealClassName()} id) {
EntityManagerHelper.log("finding ${metaData.getRealClassName()} instance with id: " + id,
Level.INFO, null);
try {
${metaData.getRealClassName()} instance = getEntityManager().find(${metaData.getRealClassName()}.class, id);
return instance;
} catch (RuntimeException re) {
EntityManagerHelper.log("find failed", Level.SEVERE, re);
throw re;
}
}
/**
* Find all  ${metaData.getRealClassName()} entities with a specific property value.
* 
* @param propertyName
*            the metaData.name of the  ${metaData.getRealClassName()} property to query
* @param value
*            the property value to match
* @return List< ${metaData.getRealClassName()}> found by query
    */
    @SuppressWarnings("unchecked")
    public List< ${metaData.getRealClassName()}> findByProperty(String propertyName, final Object value) {
        EntityManagerHelper.log("finding  ${metaData.getRealClassName()} instance with property: "
        + propertyName + ", value: " + value, Level.INFO, null);
        try {
        final String queryString = "select model from  ${metaData.getRealClassName()} model where model."
        + propertyName + "= :propertyValue";
        Query query = getEntityManager().createQuery(queryString);
        query.setParameter("propertyValue", value);
        return query.getResultList();
        } catch (RuntimeException re) {
        EntityManagerHelper.log("find by property metaData.name failed",
        Level.SEVERE, re);
        throw re;
        }
        }
        /**
        * Find all ${metaData.getRealClassName()} entities with a specific property value.
        * 
        * @param propertyName
        *            the name of the ${metaData.getRealClassName()} property to query
        * @param value
        *            the property value to match
        * @param rowStartIdxAndCount
        *            Optional int varargs. rowStartIdxAndCount[0] specifies the the
        *            row index in the query result-set to begin collecting the
        *            results. rowStartIdxAndCount[1] specifies the the maximum
        *            number of results to return.
        * @return List<${metaData.getRealClassName()}> found by query
            */
            @SuppressWarnings("unchecked")
            public List<${metaData.getRealClassName()}> findByProperty(String propertyName,
                final Object value, final int... rowStartIdxAndCount) {
                EntityManagerHelper.log("finding ${metaData.getRealClassName()} instance with property: "
                + propertyName + ", value: " + value, Level.INFO, null);
                try {
                final String queryString = "select model from ${metaData.getRealClassName()} model where model."
                + propertyName + "= :propertyValue";
                Query query = getEntityManager().createQuery(queryString);
                query.setParameter("propertyValue", value);
                if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
                int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
                if (rowStartIdx > 0) {
                query.setFirstResult(rowStartIdx);
                }
                if (rowStartIdxAndCount.length > 1) {
                int rowCount = Math.max(0, rowStartIdxAndCount[1]);
                if (rowCount > 0) {
                query.setMaxResults(rowCount);
                }
                }
                }
                return query.getResultList();
                } catch (RuntimeException re) {
                EntityManagerHelper.log("find by property name failed",
                Level.SEVERE, re);
                throw re;
                }
                }
                #foreach($member  in $metaData.properties)
                    #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
                    #if(${member.isSimpleMember()})
                        public List<${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object ${member.name}, int... rowStartIdxAndCount) {
                            return findByProperty($propUpper, ${member.name},rowStartIdxAndCount);
                            }
                            public List< ${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object ${member.name}) {
                                return findByProperty($propUpper, ${member.name});
                                }
                    #end
                #end
                /**
                * Find all ${metaData.getRealClassName()} entities.
                * 
                * @param rowStartIdxAndCount
                *            Optional int varargs. rowStartIdxAndCount[0] specifies the the
                *            row index in the query result-set to begin collecting the
                *            results. rowStartIdxAndCount[1] specifies the the maximum
                *            count of results to return.
                * @return List<${metaData.getRealClassName()}> all ${metaData.getRealClassName()} entities
                    */
                    @SuppressWarnings("unchecked")
                    public List<${metaData.getRealClassName()}> findAll(final int... rowStartIdxAndCount) {
                        EntityManagerHelper.log("finding all ${metaData.getRealClassName()} instances", Level.INFO,
                        null);
                        try {
                        final String queryString = "select model from ${metaData.getRealClassName()} model";
                        Query query = getEntityManager().createQuery(queryString);
                        if (rowStartIdxAndCount != null && rowStartIdxAndCount.length > 0) {
                        int rowStartIdx = Math.max(0, rowStartIdxAndCount[0]);
                        if (rowStartIdx > 0) {
                        query.setFirstResult(rowStartIdx);
                        }
                        if (rowStartIdxAndCount.length > 1) {
                        int rowCount = Math.max(0, rowStartIdxAndCount[1]);
                        if (rowCount > 0) {
                        query.setMaxResults(rowCount);
                        }
                        }
                        }
                        return query.getResultList();
                        } catch (RuntimeException re) {
                        EntityManagerHelper.log("find all failed", Level.SEVERE, re);
                        throw re;
                        }
                        }
                        public List< ${metaData.getRealClassName()}> findByCriteria(String whereCondition) {
                            EntityManagerHelper.log("finding ${metaData.getRealClassName()} " + whereCondition,
                            Level.INFO, null);
                            try {
                            String where = whereCondition == null
                            || whereCondition.length() == 0 ? "" : "where "
                            + whereCondition;
                            final String queryString = "select model from ${metaData.getRealClassName()} model "
                            + where;
                            Query query = getEntityManager().createQuery(queryString);
                            List< ${metaData.getRealClassName()}> entitiesList = query.getResultList();
                                return entitiesList;
                                } catch (RuntimeException re) {
                                EntityManagerHelper
                                .log("find By Criteria in ${metaData.getRealClassName()} failed", Level.SEVERE, re);
                                throw re;
                                }
                                }
                                public List<${metaData.getRealClassName()}> findPage${metaData.getRealClassName()}(String sortColumnName, boolean sortAscending,
                                    int startRow, int maxResults) {
                                    EntityManagerHelper.log("finding ${metaData.getRealClassName()} findPage${metaData.getRealClassName()}",
                                    Level.INFO, null);
                                    if(sortColumnName!=null && sortColumnName.length()>0){
                                    try {
                                    String queryString = "select model from ${metaData.getRealClassName()} model order by model."
                                    + sortColumnName + " " + (sortAscending ? "asc" : "desc");
                                    return getEntityManager().createQuery(queryString).setFirstResult(
                                    startRow).setMaxResults(maxResults).getResultList();
                                    } catch (RuntimeException re) {
                                    throw re;
                                    }
                                    }else{
                                    try {
                                    String queryString = "select model from ${metaData.getRealClassName()} model";
                                    return getEntityManager().createQuery(queryString).setFirstResult(
                                    startRow).setMaxResults(maxResults).getResultList();
                                    } catch (RuntimeException re) {
                                    throw re;
                                    }
                                    }
                                    }
                                    @SuppressWarnings("unchecked")
                                    public Long findTotalNumber${metaData.getRealClassName()}() {
                                    EntityManagerHelper.log("finding ${metaData.getRealClassName()} count",
                                    Level.INFO, null);
                                    try {
                                    String queryString = "select count(*) from ${metaData.getRealClassName()} model";
                                    return (Long) getEntityManager().createQuery(queryString)
                                    .getSingleResult();
                                    } catch (RuntimeException re) {
                                    throw re;
                                    }
                                    }
                                    }
