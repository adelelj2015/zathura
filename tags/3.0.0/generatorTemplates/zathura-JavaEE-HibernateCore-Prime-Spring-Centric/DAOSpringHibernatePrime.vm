	package  ${virginPackage}.dataaccess.dao;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;

import org.hibernate.Query;
import org.hibernate.criterion.Example;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Scope;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import org.springframework.stereotype.Repository;

import $package.${metaData.getRealClassName()};

#if($composedKey)
    import $package.${metaData.primaryKey.getRealClassName()};
#end

/**
 * A data access object (DAO) providing persistence and search support for
 * ${metaData.getRealClassName()} entities. Transaction control of the save(), update() and
 * delete() operations can directly support Spring container-managed
 * transactions or they can be augmented to handle user-managed Spring
 * transactions. Each of these methods provides additional information for how
 * to configure it for the desired type of transaction control.
 * support Andrés Mauricio Cárdenas mauriciocardenasp@gmail.com
 * @see lidis.${metaData.getRealClassName()}
 */
@Scope("singleton")
@Repository("${metaData.getRealClassName()}DAO")
public class ${metaData.getRealClassName()}DAO extends HibernateDaoSupport implements I${metaData.getRealClassName()}DAO {

	@Autowired
	public void init(SessionFactory factory) {
	    setSessionFactory(factory);
	}

	private static final Logger log = LoggerFactory.getLogger(${metaData.getRealClassName()}DAO.class);
	protected void initDao() {
		// do nothing
	}
/**
* 
* @param Instance
*            ${metaData.getRealClassName()} Instance to persist
* @throws RuntimeException
*             when the operation fails
*/
public void save(${metaData.getRealClassName()} instance) {
log.debug("saving ${metaData.getRealClassName()} instance");
try {
getHibernateTemplate().save(instance);
log.debug("save successful");
} catch (RuntimeException re) {
log.error("save failed", re);
throw re;
}
}
/**
* @param Instance
*            ${metaData.getRealClassName()} Instance to delete
* @throws RuntimeException
*             when the operation fails
*/
public void delete(${metaData.getRealClassName()} instance) {
log.debug("deleting ${metaData.getRealClassName()} instance");
try {
getHibernateTemplate().delete(instance);
log.debug("delete successful");
} catch (RuntimeException re) {
log.error("delete failed", re);
throw re;
}
}
/**
* 
* @param Instance
*            ${metaData.getRealClassName()} Instance to update
* @throws RuntimeException
*             when the operation fails
*/
	public void update(${metaData.getRealClassName()} instance) {
		log.debug("updating ${metaData.getRealClassName()} instance");
		try {
			getHibernateTemplate().update(instance);
			log.debug("update successful");
		} catch (RuntimeException re) {
			log.error("update failed", re);
			throw re;
		}
	}	

	public ${metaData.getRealClassName()} findById(${metaData.primaryKey.getRealClassName()} id) {
		log.debug("finding ${metaData.getRealClassName()} instance with id: " + id);
		try {
			${metaData.getRealClassName()} instance = (${metaData.getRealClassName()}) getHibernateTemplate().get(
			${metaData.getRealClassName()}.class, id);
			return instance;
		} catch (RuntimeException re) {
			log.error("finding ${metaData.getRealClassName()} failed", re);
			throw re;
		}
	}
	
	public List<${metaData.getRealClassName()}> findByExample(${metaData.getRealClassName()} instance) {
		log.debug("finding ${metaData.getRealClassName()} instance by example");
		try {
			List results = getHibernateTemplate().findByExample(instance);
			log.debug("find by example successful, result size: "
					+ results.size());
			return results;
		} catch (RuntimeException re) {
			log.error("find by example failed", re);
			throw re;
		}
	}

/**
* Find all  ${metaData.getRealClassName()} entities with a specific property value.
* 
* @param value
*            the property value to match
* @param propertyName
*            the property to search in the instance
* @return List< ${metaData.getRealClassName()}> found by query
    */
	public List<${metaData.getRealClassName()}> findByProperty(String propertyName, Object value) {
		log.debug("finding ${metaData.getRealClassName()} instance with property: "
				+ propertyName + ", value: " + value);
		try {
			String queryString = "from ${metaData.getRealClassName()} as model where model."
					+ propertyName + "= ?";
			return getHibernateTemplate().find(queryString, value);
		} catch (RuntimeException re) {
			log.error("find by property name failed", re);
			throw re;
		}
	}
        
    #foreach($member  in $metaData.properties)
        #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
        #if(${member.isSimpleMember()})
            public List< ${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object ${member.name}) {
                return findByProperty($propUpper, ${member.name});
			}
        #end
    #end
    /**
    * Find all ${metaData.getRealClassName()} entities.
    * 
    * @return List<${metaData.getRealClassName()}> all ${metaData.getRealClassName()} instances
        */
		
    public List<${metaData.getRealClassName()}> findAll() {
		log.debug("finding all ${metaData.getRealClassName()} instances");
		try {
			String queryString = "from ${metaData.getRealClassName()}";
			return getHibernateTemplate().find(queryString);
		} catch (RuntimeException re) {
			log.error("find all failed", re);
			throw re;
		}
    }
    public List< ${metaData.getRealClassName()}> findByCriteria(String whereCondition) {
        log.debug("finding ${metaData.getRealClassName()} " + whereCondition);
        try {
        String where = whereCondition == null
        || whereCondition.length() == 0 ? "" : "where "
        + whereCondition;
        final String queryString = "select model from ${metaData.getRealClassName()} model "
        + where;
        List< ${metaData.getRealClassName()}> entitiesList = getHibernateTemplate().find(queryString);
            return entitiesList;
            } catch (RuntimeException re) {
			log.error("find By Criteria in ${metaData.getRealClassName()} failed", re);
            throw re;
            }
    }
	
    public List<${metaData.getRealClassName()}> findPage${metaData.getRealClassName()}(String sortColumnName, boolean sortAscending,
        int startRow, int maxResults) {
		log.debug("finding ${metaData.getRealClassName()} findPage${metaData.getRealClassName()}");
        if(sortColumnName!=null && sortColumnName.length()>0){
        try {
        String queryString = "select model from ${metaData.getRealClassName()} model order by model."
        + sortColumnName + " " + (sortAscending ? "asc" : "desc");
        return  getSession().createQuery(queryString).setFirstResult(
        startRow).setMaxResults(maxResults).list();
        } catch (RuntimeException re) {
        throw re;
        }
        }else{
        try {
        String queryString = "select model from ${metaData.getRealClassName()} model";
        return getSession().createQuery(queryString).setFirstResult(
        startRow).setMaxResults(maxResults).list();
        } catch (RuntimeException re) {
        throw re;
        }
        }
    }
                                    
    public Long findTotalNumber${metaData.getRealClassName()}() {
		log.debug("finding ${metaData.getRealClassName()} count");
        try {
        String queryString = "select count(*) from ${metaData.getRealClassName()} model";
		return(Long) getHibernateTemplate().find(queryString).get(0);		
        } catch (RuntimeException re) {
        throw re;
        }
        }
		
	public static I${metaData.getRealClassName()}DAO getFromApplicationContext(ApplicationContext ctx) {
		return (I${metaData.getRealClassName()}DAO) ctx.getBean("${metaData.getRealClassName()}DAO");
	}		
    }
