package  ${packageOriginal}.control;
import java.util.ArrayList;
import java.util.List;
import java.util.Date;
import java.util.Set;
import java.math.BigDecimal;
import  ${virginPackage}.dataaccess.daoFactory.JPADaoFactory;
import  ${virginPackage}.dataaccess.entityManager.EntityManagerHelper;
import  ${virginPackage}.exceptions.*;
import  ${virginPackage}.utilities.Utilities;
import ${package}.*;
import ${package}.dto.${metaData.getRealClassName()}DTO;

/**
 * interface ${metaData.getRealClassName()}Logic
 * @author Zathura Code Generator http://code.google.com/p/zathura/
 *
 */
public class ${metaData.getRealClassName()}Logic implements I${metaData.getRealClassName()}Logic{


public List<${metaData.getRealClassName()}> get${metaData.getRealClassName()}() throws Exception{
		List<${metaData.getRealClassName()}> list = new ArrayList<${metaData.getRealClassName()}>();
            try {
            list = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().findAll(0);
            } catch (Exception e) {
            throw new ZMessManager().new GettingException(ZMessManager.ALL+"${metaData.getRealClassName()}");
            }finally{
            }
            return list;
            }
			
			
			
            public void save${metaData.getRealClassName()}(${finalParam}) throws Exception {
            ${metaData.getRealClassName()} entity = null;
            try {
            #foreach($member2  in ${finalParamForIdVariablesAsList})
                ${member2}
            #end
            #if(${metaData.isGetManyToOneProperties()})
                #foreach($member  in ${metaData.getManyToOneProperties()})
                    I${member.getRealClassName()}Logic logic${member.getRealClassName()}$velocityCount= new ${member.getRealClassName()}Logic();
                #end
                #foreach($member  in $getStringsForManyToOneProperties)
                    $member
                #end
                #foreach($member  in ${metaData.getManyToOneProperties()})
                    if(${member.getShowName()}Class==null){
						throw new ZMessManager().new ForeignException("${member.getShowName()}");
                    }
                #end
            #end
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                #foreach($idString  in $finalParamForIdClass)
                    $idString
                #end
            #end
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()}Class);
                #else
                    entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()});
            #end
            if(entity != null){
				throw new ZMessManager(ZMessManager.ENTITY_WITHSAMEKEY);
            }
            entity = new 		${metaData.getRealClassName()}();	
            #if(${metaData.isGetSimpleProperties()})
                #foreach($member2  in ${metaData.getSimpleProperties()})
                    #if(${member2.getRealClassName()}==${metaData.getPrimaryKey().getRealClassName()})
                        #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                            entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()}Class);
                        #else
                                entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()});
						#end
                        #else
                            entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()});
						#end
				#end
            #end
            #if(${metaData.isGetManyToOneProperties()})
                #foreach($member  in ${metaData.getManyToOneProperties()})
                    entity.set${member.getGetNameOfPrimaryName()}(${member.getName()}Class);
                #end
            #end
            EntityManagerHelper.beginTransaction();
            JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().save(entity);
            EntityManagerHelper.commit();
            } catch (Exception e) {
            EntityManagerHelper.rollback();
            throw e;
            }finally{
            EntityManagerHelper.closeEntityManager();
            }
            }
			
			
			
            public void delete${metaData.getRealClassName()}(${finalParamForId}) throws Exception {
            ${metaData.getRealClassName()} entity = null;
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                #foreach($idStringAsVariable  in $finalParamForIdClassAsVariables)
                    if($idStringAsVariable==null){
                    throw new ZMessManager().new EmptyFieldException("$idStringAsVariable");
                    }
                #end
                #foreach($idString  in $finalParamForIdClass)
                    $idString
                #end
                #else
                    if(${metaData.primaryKey.getShowName()}==null){
                   throw new ZMessManager().new EmptyFieldException("${metaData.primaryKey.getShowName()}");
                    }
            #end
            #if(${metaData.isGetOneToManyProperties()})
                #foreach($member  in ${metaData.getOneToManyProperties()})
                    List<${member.getRealClassName()}> ${member.name} = null;
                #end
            #end
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()}Class);
                #else
                    entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()});
            #end
            if (entity == null) {
            throw new ZMessManager().new EmptyFieldException("${metaData.getRealClassName()}");
            }
            try {
            #if(${metaData.isGetOneToManyProperties()})
                #foreach($member  in ${metaData.getOneToManyProperties()})
                    #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                        ${member.name}= JPADaoFactory.getInstance().get${member.getRealClassName()}DAO().findByProperty("${metaData.getRealClassNameAsVariable()}.${metaData.primaryKey.getShowName()}", ${metaData.primaryKey.getShowName()}Class, 0);
                        if(Utilities.validationsList(${member.name})==true){
                        throw new ZMessManager().new DeletingException("${member.name}");
                        }
                        #else
                            ${member.name}= JPADaoFactory.getInstance().get${member.getRealClassName()}DAO().findByProperty("${metaData.getRealClassNameAsVariable()}.${metaData.primaryKey.getShowName()}", ${metaData.primaryKey.getShowName()}, 0);
                            if(Utilities.validationsList(${member.name})==true){
                            throw new ZMessManager().new DeletingException("${member.name}");
                            }
                    #end
                #end
			#end
			EntityManagerHelper.beginTransaction();
            JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().delete(entity);
            EntityManagerHelper.commit();
            } catch (Exception e) {
			EntityManagerHelper.rollback();
            throw e;
            }
            finally{
            EntityManagerHelper.closeEntityManager();
            }
            }
			
			
			
			
            public void update${metaData.getRealClassName()}(${finalParam}) throws Exception {
            ${metaData.getRealClassName()} entity = null;
            try {
            #foreach($member2  in ${finalParamForIdVariablesAsList})
                ${member2}
            #end
            #if(${metaData.isGetManyToOneProperties()})
                #foreach($member  in ${metaData.getManyToOneProperties()})
                	
                    I${member.getRealClassName()}Logic logic${member.getRealClassName()}$velocityCount= new 					${member.getRealClassName()}Logic();
                #end
                #foreach($member  in $getStringsForManyToOneProperties)
                    $member
                #end
                #foreach($member  in ${metaData.getManyToOneProperties()})
                    if(${member.getShowName()}Class==null){
                    throw new ZMessManager().new ForeignException("${member.getShowName()}");
                    }
                #end
            #end
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                #foreach($idString  in $finalParamForIdClass)
                    $idString
                #end
            #end
            #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()}Class);
                #else
                    entity = get${metaData.getRealClassName()}(${metaData.primaryKey.getShowName()});
            #end
            if(entity == null){
            throw new ZMessManager(ZMessManager.ENTITY_NOENTITYTOUPDATE);
            }
            #if(${metaData.isGetSimpleProperties()})
                #foreach($member2  in ${metaData.getSimpleProperties()})
                    #if(${member2.getRealClassName()}==${metaData.getPrimaryKey().getRealClassName()})
                        #if(${metaData.getPrimaryKey().isPrimiaryKeyAComposeKey()})
                            entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()}Class);
                            #else
                                entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()});
                        #end
                        #else
                            entity.set${member2.getGetNameOfPrimaryName()}(${member2.getName()});
                    #end
                #end
            #end
            #if(${metaData.isGetManyToOneProperties()})
                #foreach($member  in ${metaData.getManyToOneProperties()})
                    entity.set${member.getGetNameOfPrimaryName()}(${member.getName()}Class);
                #end
            #end
            EntityManagerHelper.beginTransaction();
            JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().update(entity);
            EntityManagerHelper.commit();
            } catch (Exception e) {
            EntityManagerHelper.rollback();
            throw e;
            }finally{
            EntityManagerHelper.closeEntityManager();
            }
            }
			
			
			
            public ${metaData.getRealClassName()} get${metaData.getRealClassName()}(${metaData.primaryKey.getRealClassName()} ${metaData.primaryKey.getShowName()}) throws Exception {
            ${metaData.getRealClassName()} entity = null;
            try {
            entity = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().findById(${metaData.primaryKey.getShowName()});
            } catch (Exception e) {
			throw new ZMessManager().new FindingException("${metaData.getRealClassName()}");
            }finally{
            }
            return entity;
            }
			
			## get Data for ListDataTable y ListDataTableEditable
			public List<${metaData.getRealClassName()}DTO>getData${metaData.getRealClassName()}()throws Exception{
					try{
					
					List<${metaData.getRealClassName()}> ${metaData.getRealClassNameAsVariable()} = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO().findAll(0);
					
					List<${metaData.getRealClassName()}DTO > ${metaData.getRealClassNameAsVariable()}DTO = new ArrayList<${metaData.getRealClassName()}DTO>();
						for (${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()}Tmp : ${metaData.getRealClassNameAsVariable()}) {
							${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO2 = new ${metaData.getRealClassName()}DTO();
							
								#foreach($member2  in $dtoConvert)
                                    ${member2}
                                #end
                                #foreach($member2  in $dtoConvert2)
                                    ${member2}
								#end
								${metaData.getRealClassNameAsVariable()}DTO.add(${metaData.getRealClassNameAsVariable()}DTO2);	
						}
						
						return ${metaData.getRealClassNameAsVariable()}DTO ;
					
					}catch(Exception e){
					throw e;	
					}
				
			}
			
			
            public List<${metaData.getRealClassName()}> findPage${metaData.getRealClassName()}(String sortColumnName, boolean sortAscending,
                int startRow, int maxResults) throws Exception {
                List<${metaData.getRealClassName()}> entity = null;
                    try {
                    entity = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO()
                    .findPage${metaData.getRealClassName()}(sortColumnName, sortAscending, startRow,
                    maxResults);
                    } catch (Exception e) {
					throw new ZMessManager().new FindingException("${metaData.getRealClassName()}");
                    } 
                    return entity;
                    }
					
					
					
                    public Long findTotalNumber${metaData.getRealClassName()}() throws Exception {
                    Long entity = null;
                    try {
                    entity = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO()
                    .findTotalNumber${metaData.getRealClassName()}();
                    } catch (Exception e) {
					throw new ZMessManager().new FindingException("${metaData.getRealClassName()} Count");
                    } finally {
                    }
                    return entity;
                    }
					
					
					
                    /**
                    * 
                    * @param varibles
                    *            este arreglo debera tener:
                    * 
                    * [0] = String variable = (String) varibles[i]; representa como se llama la
                    * variable en el pojo
                    * 
                    * [1] = Boolean booVariable = (Boolean) varibles[i + 1]; representa si el
                    * valor necesita o no ''(comillas simples)usado para campos de tipo string
                    * 
                    * [2] = Object value = varibles[i + 2]; representa el valor que se va a
                    * buscar en la BD
                    * 
                    * [3] = String comparator = (String) varibles[i + 3]; representa que tipo
                    * de busqueda voy a hacer.., ejemplo: where nombre=william o where nombre<>william,
                        * en este campo iria el tipo de comparador que quiero si es = o <>
                            * 
                            * Se itera de 4 en 4..., entonces 4 registros del arreglo representan 1
                            * busqueda en un campo, si se ponen mas pues el continuara buscando en lo
                            * que se le ingresen en los otros 4
                            * 
                            * 
                            * @param variablesBetween
                            * 
                            * la diferencia son estas dos posiciones
                            * 
                            * [0] = String variable = (String) varibles[j]; la variable ne la BD que va
                            * a ser buscada en un rango
                            * 
                            * [1] = Object value = varibles[j + 1]; valor 1 para buscar en un rango
                            * 
                            * [2] = Object value2 = varibles[j + 2]; valor 2 para buscar en un rango
                            * ejempolo: a > 1 and a < 5 --> 1 seria value y 5 seria value2
                                * 
                                * [3] = String comparator1 = (String) varibles[j + 3]; comparador 1
                                * ejemplo: a comparator1 1 and a < 5
                                    * 
                                    * [4] = String comparator2 = (String) varibles[j + 4]; comparador 2
                                    * ejemplo: a comparador1>1  and a comparador2<5  (el original: a > 1 and a <
                                            * 5) *
                                            * @param variablesBetweenDates(en
                                            *            este caso solo para mysql)
                                            *  [0] = String variable = (String) varibles[k]; el nombre de la variable que hace referencia a
                                            *            una fecha
                                            * 
                                            * [1] = Object object1 = varibles[k + 2]; fecha 1 a comparar(deben ser
                                            * dates)
                                            * 
                                            * [2] = Object object2 = varibles[k + 3]; fecha 2 a comparar(deben ser
                                            * dates)
                                            * 
                                            * esto hace un between entre las dos fechas.
                                            * 
                                            * @return lista con los objetos que se necesiten
                                            * @throws Exception
                                            */
                                            public List<${metaData.getRealClassName()}> findByCriteria(Object[] variables, Object[] variablesBetween,
                                                Object[] variablesBetweenDates) throws Exception {
                                                List<${metaData.getRealClassName()}> list = new ArrayList<${metaData.getRealClassName()}>();
                                                        String where = new String();
                                                        String tempWhere = new String();
                                                        if (variables != null) {
                                                        for (int i = 0; i < variables.length; i++) {
                                                            if (variables[i] != null && variables[i + 1] != null
                                                            && variables[i + 2] != null
                                                            && variables[i + 3] != null) {
                                                            String variable = (String) variables[i];
                                                            Boolean booVariable = (Boolean) variables[i + 1];
                                                            Object value = variables[i + 2];
                                                            String comparator = (String) variables[i + 3];
                                                            if (booVariable.booleanValue()) {
                                                            tempWhere = (tempWhere.length() == 0) ? ("(model."
                                                            + variable + " " + comparator + " \'" + value + "\' )")
                                                            : (tempWhere + " AND (model." + variable + " "
                                                            + comparator + " \'" + value + "\' )");
                                                            } else {
                                                            tempWhere = (tempWhere.length() == 0) ? ("(model."
                                                            + variable + " " + comparator + " " + value + " )")
                                                            : (tempWhere + " AND (model." + variable + " "
                                                            + comparator + " " + value + " )");
                                                            }
                                                            }
                                                            i = i + 3;
                                                            }
                                                            }
                                                            if (variablesBetween != null) {
                                                            for (int j = 0; j < variablesBetween.length; j++) {
                                                                if (variablesBetween[j] != null
                                                                && variablesBetween[j + 1] != null
                                                                && variablesBetween[j + 2] != null
                                                                && variablesBetween[j + 3] != null
                                                                && variablesBetween[j + 4] != null) {
                                                                String variable = (String) variablesBetween[j];
                                                                Object value = variablesBetween[j + 1];
                                                                Object value2 = variablesBetween[j + 2];
                                                                String comparator1 = (String) variablesBetween[j + 3];
                                                                String comparator2 = (String) variablesBetween[j + 4];
                                                                tempWhere = (tempWhere.length() == 0) ? ("(" + value
                                                                + " " + comparator1 + " " + variable + " and "
                                                                + variable + " " + comparator2 + " " + value2 + " )")
                                                                : (tempWhere + " AND (" + value + " "
                                                                + comparator1 + " " + variable
                                                                + " and " + variable + " "
                                                                + comparator2 + " " + value2 + " )");
                                                                }
                                                                j = j + 4;
                                                                }
                                                                }
                                                                if (variablesBetweenDates != null) {
                                                                for (int k = 0; k < variablesBetweenDates.length; k++) {
                                                                    if (variablesBetweenDates[k] != null
                                                                    && variablesBetweenDates[k + 1] != null
                                                                    && variablesBetweenDates[k + 2] != null) {
                                                                    String variable = (String) variablesBetweenDates[k];
                                                                    Object object1 = variablesBetweenDates[k + 1];
                                                                    Object object2 = variablesBetweenDates[k + 2];
                                                                    String value = null;
                                                                    String value2 = null;
                                                                    try {
                                                                    Date date1 = (Date) object1;
                                                                    Date date2 = (Date) object2;
                                                                    value = Utilities
                                                                    .formatDateWithoutTimeInAStringForBetweenWhere(date1);
                                                                    value2 = Utilities
                                                                    .formatDateWithoutTimeInAStringForBetweenWhere(date2);
                                                                    } catch (Exception e) {
                                                                    list = null;
                                                                    throw e;
                                                                    }
                                                                    tempWhere = (tempWhere.length() == 0) ? ("(model."
                                                                    + variable + " between \'" + value + "\' and \'"
                                                                    + value2 + "\')") : (tempWhere + " AND (model."
                                                                    + variable + " between \'" + value + "\' and \'"
                                                                    + value2 + "\')");
                                                                    }
                                                                    k = k + 2;
                                                                    }
                                                                    }
                                                                    if (tempWhere.length() == 0) {
                                                                    where = null;
                                                                    }else{
                                                                    where = "(" + tempWhere + ")";
                                                                    }
                                                                    try {
                                                                    list = JPADaoFactory.getInstance().get${metaData.getRealClassName()}DAO()
                                                                    .findByCriteria(where);
                                                                    } catch (Exception e) {
                                                                    throw new Exception(e.getMessage());
                                                                    } finally {
                                                                    }
                                                                    return list;
                                                                    }
                                                                    }
