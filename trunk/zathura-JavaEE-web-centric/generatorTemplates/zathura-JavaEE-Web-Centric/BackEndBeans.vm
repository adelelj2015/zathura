package  ${virginPackage}.presentation.backEndBeans;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.Vector;
import java.math.BigDecimal;
import java.util.TimeZone;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.DataModel;
import com.icesoft.faces.component.ext.HtmlCommandButton;
import com.icesoft.faces.component.ext.HtmlInputText;
import com.icesoft.faces.component.selectinputdate.SelectInputDate;
import com.icesoft.faces.webapp.xmlhttp.FatalRenderingException;
import com.icesoft.faces.webapp.xmlhttp.PersistentFacesState;
import com.icesoft.faces.webapp.xmlhttp.RenderingException;
import com.icesoft.faces.webapp.xmlhttp.TransientRenderingException;
import com.icesoft.faces.context.DisposableBean;
import com.icesoft.faces.async.render.RenderManager;
import com.icesoft.faces.async.render.Renderable;    
import  ${virginPackage}.exceptions.ExceptionMessages;
#foreach($metaData  in $dataModel.theMetaData)
    import ${packageOriginal}.control.${metaData.getRealClassName()}Logic;
    import ${packageOriginal}.control.I${metaData.getRealClassName()}Logic;
    import ${package}.${metaData.getRealClassName()};
    #if(${metaData.primaryKey.isPrimiaryKeyAComposeKey()})
        import ${package}.${metaData.primaryKey.getRealClassName()};
    #end
#end
import ${packageOriginal}.dto.${metaData.getRealClassName()}DTO;
import ${virginPackage}.presentation.businessDelegate.BusinessDelegatorView;
import ${virginPackage}.utilities.Utilities;
import ${virginPackage}.utilities.DataPage;
import ${virginPackage}.utilities.DataSource;
import ${virginPackage}.utilities.PagedListDataModel;
/**
* 
*  
* @author Zathura Code Generator http://code.google.com/p/zathura/
*
*/
public class ${metaData.getRealClassName()}View extends DataSource implements Renderable, DisposableBean{
public ${metaData.getRealClassName()}View() {
super("");
}
#foreach($member2  in $finalParamForViewVariablesInList)
    private HtmlInputText txt${member2};
#end
#foreach($member2  in $finalParamForIdForViewVariablesInList)
    private HtmlInputText txt${member2};
#end
#if(${isFinalParamForViewDatesInList})
    #foreach($member2  in $finalParamForViewDatesInList)
        private SelectInputDate txt${member2};
    #end
#end
#if(${isFinalParamForIdForViewDatesInList})
    #foreach($member2  in $finalParamForIdForViewDatesInList)
        private SelectInputDate txt${member2};
    #end
#end
private HtmlCommandButton btnSave;
private HtmlCommandButton btnModify;
private HtmlCommandButton btnDelete;
private HtmlCommandButton btnClear;
private boolean renderDataTable;
private boolean flag = true;
private RenderManager renderManager;
private PersistentFacesState state = PersistentFacesState.getInstance();
private List<${metaData.getRealClassName()}> ${metaData.getRealClassNameAsVariable()};
    private List<${metaData.getRealClassName()}DTO> ${metaData.getRealClassNameAsVariable()}DTO;
        public String action_clear() {
        #foreach($member2  in $finalParamForViewVariablesInList)
            txt${member2}.setValue(null);
            txt${member2}.setDisabled(true);
        #end
        #if(${isFinalParamForViewDatesInList})
            #foreach($member2  in $finalParamForViewDatesInList)
                txt${member2}.setValue(null);
                txt${member2}.setDisabled(true);
            #end
        #end
        #foreach($member2  in $finalParamForIdForViewVariablesInList)
            txt${member2}.setValue(null);
            txt${member2}.setDisabled(false);
        #end
        #if(${isFinalParamForIdForViewDatesInList})
            #foreach($member2  in $finalParamForIdForViewDatesInList)
                txt${member2}.setValue(null);
                txt${member2}.setDisabled(false);
            #end
        #end
        btnSave.setDisabled(true);
        btnDelete.setDisabled(true);
        btnModify.setDisabled(true);
        btnClear.setDisabled(false);
        return "";
        }
        public void listener_txtId(ValueChangeEvent event){
        if (event.getNewValue() != null && !event.getNewValue().equals("")) {
        ${metaData.getRealClassName()} entity = null;
        try {
        #foreach($member2  in $finalParamForIdForViewClass)
            $member2
        #end
        entity = BusinessDelegatorView.get${metaData.getRealClassName()}(${metaData.primaryKey.getName()});
        } catch (Exception e) {
        // TODO: handle exception
        }
        if(entity==null){
        #foreach($member2  in $finalParamForViewVariablesInList)
            txt${member2}.setDisabled(false);
        #end
        #if(${isFinalParamForViewDatesInList})
            #foreach($member2  in $finalParamForViewDatesInList)
                txt${member2}.setDisabled(false);
            #end
        #end
        #foreach($member2  in $finalParamForIdForViewVariablesInList)
            txt${member2}.setDisabled(false);
        #end
        #if(${isFinalParamForIdForViewDatesInList})
            #foreach($member2  in $finalParamForIdForViewDatesInList)
                txt${member2}.setDisabled(false);
            #end
        #end
        btnSave.setDisabled(false);
        btnDelete.setDisabled(true);
        btnModify.setDisabled(true);
        btnClear.setDisabled(false);
        }else{
        #foreach($member2  in $finalParamForViewForSetsVariablesInList)
            ${member2}
        #end
        #foreach($member2  in $finalParamForIdForViewForSetsVariablesInList)
            ${member2}
        #end
        btnSave.setDisabled(true);
        btnDelete.setDisabled(false);
        btnModify.setDisabled(false);
        btnClear.setDisabled(false);
        }
        }
        }
        public String action_save() {
        try {
        BusinessDelegatorView.save${metaData.getRealClassName()}(${finalParamForView});
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(ExceptionMessages.ENTITY_SUCCESFULLYSAVED));
        } catch (Exception e) {
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(e.getMessage()));
        }
        action_clear();
        return "";
        }
        public String action_delete() {
        try {
        BusinessDelegatorView.delete${metaData.getRealClassName()}($finalParamForIdClassAsVariablesAsString);
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(ExceptionMessages.ENTITY_SUCCESFULLYDELETED));
        } catch (Exception e) {
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(e.getMessage()));
        }
        action_clear();
        return "";
        }
        public String action_modify() {
        try {
        BusinessDelegatorView.update${metaData.getRealClassName()}(${finalParamForView});
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(ExceptionMessages.ENTITY_SUCCESFULLYMODIFIED));
        } catch (Exception e) {
        FacesContext.getCurrentInstance().addMessage("", 
        new FacesMessage(e.getMessage()));
        }
        action_clear();
        return "";
        }
        public String action_modifyWitDTO(${finalParam}) throws Exception {
        try {
        BusinessDelegatorView.update${metaData.getRealClassName()}(${finalParamForDtoUpdateOnlyVariables});
        renderManager.getOnDemandRenderer("${metaData.getRealClassName()}View").requestRender();
        FacesContext.getCurrentInstance().addMessage(
        "",
        new FacesMessage(
        ExceptionMessages.ENTITY_SUCCESFULLYMODIFIED));
        } catch (Exception e) {
        //renderManager.getOnDemandRenderer("${metaData.getRealClassName()}View").requestRender();
        FacesContext.getCurrentInstance().addMessage("",
        new FacesMessage(e.getMessage()));
        throw e;
        }
        return "";
        }
        public List<${metaData.getRealClassName()}> get${metaData.getRealClassName()}() {
            if(flag){
            try {
            ${metaData.getRealClassNameAsVariable()} = BusinessDelegatorView.get${metaData.getRealClassName()}();
            flag = false;
            } catch (Exception e) {
            flag = true;
            FacesContext.getCurrentInstance().addMessage("", 
            new FacesMessage(e.getMessage()));
            } 
            }
            return ${metaData.getRealClassNameAsVariable()};
            }	
            public boolean isFlag() {
            return flag;
            }
            public void set${metaData.getRealClassName()}(List<${metaData.getRealClassName()}> ${metaData.getRealClassNameAsVariable()}) {
                this.${metaData.getRealClassNameAsVariable()} = ${metaData.getRealClassNameAsVariable()};
                }
                public boolean isRenderDataTable() {
                try {
                if (flag) {
                if (BusinessDelegatorView.findTotalNumber${metaData.getRealClassName()}()>0) {
                renderDataTable = true;
                } else {
                renderDataTable = false;
                }
                }
                flag = false;
                } catch (Exception e) {
                renderDataTable = false;
                e.printStackTrace();
                }
                return renderDataTable;
                }
                public DataModel getData() {
                state = PersistentFacesState.getInstance();
                if (onePageDataModel == null) {
                onePageDataModel = new LocalDataModel(pageSize);
                }
                return onePageDataModel;
                }
                /**
                * This is where the Object data is retrieved from the database and
                * returned as a list of objects for display in the UI.
                */
                private DataPage<${metaData.getRealClassName()}> getDataPage(int startRow, int pageSize) {
                    // Retrieve the total number of objects from the database.  This
                    // number is required by the DataPage object so the paginator will know
                    // the relative location of the page data.
                    int totalNumber${metaData.getRealClassName()} = 0;
                    try {
                    totalNumber${metaData.getRealClassName()} = BusinessDelegatorView.findTotalNumber${metaData.getRealClassName()}().intValue();
                    } catch (Exception e) {
                    FacesContext.getCurrentInstance().addMessage("", 
                    new FacesMessage(e.getMessage()));
                    }
                    // Calculate indices to be displayed in the ui.
                    int endIndex = startRow + pageSize;
                    if (endIndex > totalNumber${metaData.getRealClassName()}) {
                    endIndex = totalNumber${metaData.getRealClassName()};
                    }
                    try {
                    ${metaData.getRealClassNameAsVariable()} = BusinessDelegatorView.findPage${metaData.getRealClassName()}(sortColumnName, sortAscending, startRow, endIndex - startRow);
                    // Remove this Renderable from the existing render groups.
                    //leaveRenderGroups();        			
                    } catch (Exception e) {
                    FacesContext.getCurrentInstance().addMessage("", 
                    new FacesMessage(e.getMessage()));
                    }
                    // Add this Renderable to the new render groups.
                    //joinRenderGroups();
                    // Reset the dirtyData flag.
                    onePageDataModel.setDirtyData(false);
                    // This is required when using Hibernate JPA.  If the EntityManager is not
                    // cleared or closed objects are cached and stale objects will show up
                    // in the table.
                    // This way, the detached objects are reread from the database.
                    // This call is not required with TopLink JPA, which uses a Query Hint
                    // to clear the l2 cache in the DAO.
                    //EntityManagerHelper.getEntityManager().clear();
                    flag = true;
                    return new DataPage<${metaData.getRealClassName()}>(totalNumber${metaData.getRealClassName()}, startRow, 			${metaData.getRealClassNameAsVariable()});
                        }
                        public DataModel getDataDTO() {
                        state = PersistentFacesState.getInstance();
                        if (onePageDataModel == null) {
                        onePageDataModel = new LocalDataModelDTO(pageSize);
                        }
                        return onePageDataModel;
                        }
                        /**
                        * This is where the Object data is retrieved from the database and
                        * returned as a list of objects for display in the UI.
                        */
                        private DataPage<${metaData.getRealClassName()}DTO> getDataPageDTO(int startRow, int pageSize) {
                            // Retrieve the total number of objects from the database.  This
                            // number is required by the DataPage object so the paginator will know
                            // the relative location of the page data.
                            int totalNumber${metaData.getRealClassName()} = 0;
                            try {
                            totalNumber${metaData.getRealClassName()} = BusinessDelegatorView.findTotalNumber${metaData.getRealClassName()}().intValue();
                            } catch (Exception e) {
                            FacesContext.getCurrentInstance().addMessage("", 
                            new FacesMessage(e.getMessage()));
                            }
                            // Calculate indices to be displayed in the ui.
                            int endIndex = startRow + pageSize;
                            if (endIndex > totalNumber${metaData.getRealClassName()}) {
                            endIndex = totalNumber${metaData.getRealClassName()};
                            }
                            try {
                            ${metaData.getRealClassNameAsVariable()} = BusinessDelegatorView.findPage${metaData.getRealClassName()}(sortColumnName, sortAscending, startRow, endIndex - startRow);
                            if (Utilities.validationsList(			${metaData.getRealClassNameAsVariable()})) {
                            ${metaData.getRealClassNameAsVariable()}DTO = new ArrayList<${metaData.getRealClassName()}DTO>();
                                for (${metaData.getRealClassName()} ${metaData.getRealClassNameAsVariable()}Tmp : ${metaData.getRealClassNameAsVariable()}) {
                                ${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}DTO2 = new ${metaData.getRealClassName()}DTO();
                                #foreach($member2  in $finalParamForIdForDtoInViewForSetsVariablesInList)
                                    ${member2}
                                #end
                                #foreach($member2  in $finalParamForDtoInViewForSetsVariablesInList)
                                    ${member2}
                                #end
                                ${metaData.getRealClassNameAsVariable()}DTO2.set${metaData.getRealClassName()}(${metaData.getRealClassNameAsVariable()}Tmp);
                                ${metaData.getRealClassNameAsVariable()}DTO2.set${metaData.getRealClassName()}View(this);
                                ${metaData.getRealClassNameAsVariable()}DTO.add(${metaData.getRealClassNameAsVariable()}DTO2);
                                }
                                }			
                                // Remove this Renderable from the existing render groups.
                                leaveRenderGroups();        			
                                } catch (Exception e) {
                                FacesContext.getCurrentInstance().addMessage("", 
                                new FacesMessage(e.getMessage()));
                                }
                                // Add this Renderable to the new render groups.
                                joinRenderGroups();
                                // Reset the dirtyData flag.
                                onePageDataModel.setDirtyData(false);
                                // This is required when using Hibernate JPA.  If the EntityManager is not
                                // cleared or closed objects are cached and stale objects will show up
                                // in the table.
                                // This way, the detached objects are reread from the database.
                                // This call is not required with TopLink JPA, which uses a Query Hint
                                // to clear the l2 cache in the DAO.
                                //EntityManagerHelper.getEntityManager().clear();
                                flag = true;
                                return new DataPage<${metaData.getRealClassName()}DTO>(totalNumber${metaData.getRealClassName()}, startRow, 			${metaData.getRealClassNameAsVariable()}DTO);
                                    }    
                                    /**
                                    * A special type of JSF DataModel to allow a datatable and datapaginator
                                    * to page through a large set of data without having to hold the entire
                                    * set of data in memory at once.
                                    * Any time a managed bean wants to avoid holding an entire dataset,
                                    * the managed bean declares this inner class which extends PagedListDataModel
                                    * and implements the fetchData method. fetchData is called
                                    * as needed when the table requires data that isn't available in the
                                    * current data page held by this object.
                                    * This requires the managed bean (and in general the business
                                    * method that the managed bean uses) to provide the data wrapped in
                                    * a DataPage object that provides info on the full size of the dataset.
                                    */
                                    private class LocalDataModel extends PagedListDataModel {
                                    public LocalDataModel(int pageSize) {
                                    super(pageSize);
                                    }
                                    public DataPage<${metaData.getRealClassName()}> fetchPage(int startRow, int pageSize) {
                                        // call enclosing managed bean method to fetch the data
                                        return getDataPage(startRow, pageSize);
                                        }
                                        }
                                        private class LocalDataModelDTO extends PagedListDataModel {
                                        public LocalDataModelDTO(int pageSize) {
                                        super(pageSize);
                                        }
                                        public DataPage<${metaData.getRealClassName()}DTO> fetchPage(int startRow, int pageSize) {
                                            // call enclosing managed bean method to fetch the data
                                            return getDataPageDTO(startRow, pageSize);
                                            }
                                            }    
                                            protected boolean isDefaultAscending(String sortColumn) {
                                            return true;
                                            }
                                            /**
                                            * This method is called when a render call is made from the server. Render
                                            * calls are only made to views containing an updated record. The data is
                                            * marked as dirty to trigger a fetch of the updated record from the
                                            * database before rendering takes place.
                                            */
                                            public PersistentFacesState getState() {
                                            onePageDataModel.setDirtyData();
                                            return state;
                                            }
                                            /**
                                            * This method is called from faces-config.xml with each new session.
                                            */
                                            public void setRenderManager(RenderManager renderManager) {
                                            this.renderManager = renderManager;
                                            }
                                            public void renderingException(RenderingException arg0) {
                                            if (arg0 instanceof TransientRenderingException) {
                                            } else if (arg0 instanceof FatalRenderingException) {
                                            // Remove from existing Customer render groups.
                                            leaveRenderGroups();
                                            }
                                            }
                                            /**
                                            * Remove this Renderable from existing uiCustomerBeans render groups.
                                            * OnDemandRenderers are named/created using the underlying Customer Number.
                                            */
                                            private void leaveRenderGroups() {
                                            if (Utilities.validationsList(${metaData.getRealClassNameAsVariable()}DTO)) {
                                            for (${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}Tmp : ${metaData.getRealClassNameAsVariable()}DTO) {
                                            renderManager.getOnDemandRenderer("${metaData.getRealClassName()}View").remove(this);
                                            }
                                            }
                                            }
                                            /**
                                            * Add this Renderable to the new uiCustomerBeans render groups.
                                            * OnDemandRenderers are named/created using the underlying Customer Number.
                                            */
                                            private void joinRenderGroups() {
                                            if (Utilities.validationsList(${metaData.getRealClassNameAsVariable()}DTO)) {
                                            for (${metaData.getRealClassName()}DTO ${metaData.getRealClassNameAsVariable()}Tmp : ${metaData.getRealClassNameAsVariable()}DTO) {
                                            renderManager.getOnDemandRenderer("${metaData.getRealClassName()}View").add(this);
                                            }
                                            }
                                            }
                                            public void dispose() throws Exception {
                                            }
                                            public RenderManager getRenderManager() {
                                            return renderManager;
                                            }
                                            public void setState(PersistentFacesState state) {
                                            this.state = state;
                                            }
                                            #foreach($member2  in $finalParamForViewVariablesInList)
                                                public HtmlInputText getTxt${member2}() {
                                                return txt${member2};
                                                }
                                                public void setTxt${member2}(HtmlInputText txt${member2}) {
                                                this.txt${member2} = txt${member2};
                                                }
                                            #end
                                            #if(${isFinalParamForViewDatesInList})
                                                #foreach($member2  in $finalParamForViewDatesInList)
                                                    public SelectInputDate getTxt${member2}() {
                                                    return txt${member2};
                                                    }
                                                    public void setTxt${member2}(SelectInputDate txt${member2}) {
                                                    this.txt${member2} = txt${member2};
                                                    }
                                                #end
                                            #end
                                            #foreach($member2  in $finalParamForIdForViewVariablesInList)
                                                public HtmlInputText getTxt${member2}() {
                                                return txt${member2};
                                                }
                                                public void setTxt${member2}(HtmlInputText txt${member2}) {
                                                this.txt${member2} = txt${member2};
                                                }
                                            #end
                                            #if(${isFinalParamForIdForViewDatesInList})
                                                #foreach($member2  in $finalParamForIdForViewDatesInList)
                                                    public SelectInputDate getTxt${member2}() {
                                                    return txt${member2};
                                                    }
                                                    public void setTxt${member2}(SelectInputDate txt${member2}) {
                                                    this.txt${member2} = txt${member2};
                                                    }
                                                #end
                                            #end
                                            public HtmlCommandButton getBtnSave() {
                                            return btnSave;
                                            }
                                            public void setBtnSave(HtmlCommandButton btnSave) {
                                            this.btnSave = btnSave;
                                            }
                                            public HtmlCommandButton getBtnModify() {
                                            return btnModify;
                                            }
                                            public void setBtnModify(HtmlCommandButton btnModify) {
                                            this.btnModify = btnModify;
                                            }
                                            public HtmlCommandButton getBtnDelete() {
                                            return btnDelete;
                                            }
                                            public void setBtnDelete(HtmlCommandButton btnDelete) {
                                            this.btnDelete = btnDelete;
                                            }
                                            public HtmlCommandButton getBtnClear() {
                                            return btnClear;
                                            }
                                            public void setBtnClear(HtmlCommandButton btnClear) {
                                            this.btnClear = btnClear;
                                            }
                                            public void setRenderDataTable(boolean renderDataTable) {
                                            this.renderDataTable = renderDataTable;
                                            }
                                            public void setFlag(boolean flag) {
                                            this.flag = flag;
                                            }
                                            public List<${metaData.getRealClassName()}DTO> get${metaData.getRealClassName()}DTO() {
                                                return ${metaData.getRealClassNameAsVariable()}DTO;
                                                }
                                                public void set${metaData.getRealClassName()}DTO(List<${metaData.getRealClassName()}DTO> 			${metaData.getRealClassNameAsVariable()}DTO) {
                                                    this.			${metaData.getRealClassNameAsVariable()}DTO = 			${metaData.getRealClassNameAsVariable()}DTO;
                                                    }
                                                    public TimeZone getTimeZone() {
                                                    return java.util.TimeZone.getDefault();
                                                    } 
                                                    }
