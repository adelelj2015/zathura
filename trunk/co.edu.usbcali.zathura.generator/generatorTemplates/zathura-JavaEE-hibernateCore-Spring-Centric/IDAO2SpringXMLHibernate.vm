package  ${virginPackage}.dataaccess.dao;
import java.util.List;
import java.util.Set;
import java.util.Date;
import java.math.BigDecimal;
import $package.${metaData.getRealClassName()};
#if($composedKey == true)
    import $package.${metaData.primaryKey.getRealClassName()};
#end
/**
* Interface for ${metaData.getRealClassName()}DAO.
* 
*/
public interface I${metaData.getRealClassName()}DAO {

// property constants
#foreach($member  in $metaData.properties)
    #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
    #if(${member.isSimpleMember()})
        //public static final $member.getRealClassName()  $propUpper = "${member.name}";
        public static final String  $propUpper = "${member.name}";
    #end
#end

public void save(${metaData.getRealClassName()} instance);
public void delete(${metaData.getRealClassName()} instance);
public void update(${metaData.getRealClassName()} instance);
public ${metaData.getRealClassName()} findById(${metaData.primaryKey.getRealClassName()} id) ;
public List<${metaData.getRealClassName()}> findByExample(${metaData.getRealClassName()} instance);
public List<${metaData.getRealClassName()}> findByProperty(String propertyName, Object value);
public List<${metaData.getRealClassName()}> findAll();	
public List<${metaData.getRealClassName()}> findByCriteria(String whereCondition);
public List<${metaData.getRealClassName()}> findPage${metaData.getRealClassName()}(String sortColumnName, boolean sortAscending,
                        int startRow, int maxResults) ;
public Long findTotalNumber${metaData.getRealClassName()}() ;
#foreach($member  in $metaData.properties)
    #set( $prop = ${member.name} ) #set( $propUpper = $prop.toString().toUpperCase() )
    #if(${member.isSimpleMember()})
        public List<${metaData.getRealClassName()}> findBy${member.getGetNameOfPrimaryName()}(Object ${member.name}) ;
    #end
#end

}